// <auto-generated />
using System;
using InventoryManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925174051_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventoryManagement.Models.Adjustment", b =>
                {
                    b.Property<int>("AdjustmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdjustmentID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserUserID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AdjustmentID");

                    b.HasIndex("CreatedByUserUserID");

                    b.HasIndex("LocationID");

                    b.ToTable("Adjustments");
                });

            modelBuilder.Entity("InventoryManagement.Models.AdjustmentLine", b =>
                {
                    b.Property<int>("AdjustmentLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdjustmentLineID"));

                    b.Property<int>("AdjustmentID")
                        .HasColumnType("int");

                    b.Property<int?>("BatchID")
                        .HasColumnType("int");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<decimal>("QuantityDelta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AdjustmentLineID");

                    b.HasIndex("AdjustmentID");

                    b.HasIndex("BatchID");

                    b.HasIndex("GoodID");

                    b.ToTable("AdjustmentLines");
                });

            modelBuilder.Entity("InventoryManagement.Models.Batch", b =>
                {
                    b.Property<int>("BatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchID"));

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.HasKey("BatchID");

                    b.HasIndex("GoodID", "BatchNo")
                        .IsUnique();

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("InventoryManagement.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InventoryManagement.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("InventoryManagement.Models.Good", b =>
                {
                    b.Property<int>("GoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoodID"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("PriceCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PriceSell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GoodID");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasFilter("[Barcode] IS NOT NULL");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("InventoryManagement.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentLocationID")
                        .HasColumnType("int");

                    b.HasKey("LocationID");

                    b.HasIndex("LocationType");

                    b.HasIndex("ParentLocationID");

                    b.ToTable("Locations", t =>
                        {
                            t.HasCheckConstraint("CK_Locations_LocationType", "[LocationType] IN ('WAREHOUSE','STORE','BIN')");
                        });
                });

            modelBuilder.Entity("InventoryManagement.Models.PriceChange", b =>
                {
                    b.Property<int>("PriceChangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceChangeID"));

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ChangedByUserUserID")
                        .HasColumnType("int");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PriceChangeID");

                    b.HasIndex("ChangedByUserUserID");

                    b.HasIndex("GoodID");

                    b.ToTable("PriceChanges");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("POID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("POID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("POID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SupplierID");

                    b.ToTable("PurchaseOrders", t =>
                        {
                            t.HasCheckConstraint("CK_PurchaseOrders_Status", "[Status] IN ('Draft','Submitted','Received','Cancelled')");
                        });
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchaseOrderLine", b =>
                {
                    b.Property<int>("POLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("POLineID"));

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<int>("POID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("POLineID");

                    b.HasIndex("GoodID");

                    b.HasIndex("POID");

                    b.ToTable("PurchaseOrderLines");
                });

            modelBuilder.Entity("InventoryManagement.Models.Receipt", b =>
                {
                    b.Property<int>("ReceiptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int?>("POID")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedBy")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("ReceiptID");

                    b.HasIndex("LocationID");

                    b.HasIndex("POID");

                    b.HasIndex("ReceivedBy");

                    b.HasIndex("SupplierID");

                    b.ToTable("Receipts", t =>
                        {
                            t.HasCheckConstraint("CK_Receipts_Status", "[Status] IN ('Draft','Confirmed')");
                        });
                });

            modelBuilder.Entity("InventoryManagement.Models.ReceiptDetail", b =>
                {
                    b.Property<int>("ReceiptDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptDetailID"));

                    b.Property<int?>("BatchID")
                        .HasColumnType("int");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReceiptID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ReceiptDetailID");

                    b.HasIndex("BatchID");

                    b.HasIndex("GoodID");

                    b.HasIndex("ReceiptID");

                    b.ToTable("ReceiptDetails");
                });

            modelBuilder.Entity("InventoryManagement.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RefID")
                        .HasColumnType("int");

                    b.Property<string>("RefTable")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ReservationID");

                    b.HasIndex("GoodID");

                    b.HasIndex("LocationID", "GoodID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("InventoryManagement.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("InventoryManagement.Models.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StoreLocationID")
                        .HasColumnType("int");

                    b.HasKey("SaleID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StoreLocationID");

                    b.ToTable("Sales", t =>
                        {
                            t.HasCheckConstraint("CK_Sales_Status", "[Status] IN ('Draft','Completed','Cancelled')");
                        });
                });

            modelBuilder.Entity("InventoryManagement.Models.SaleLine", b =>
                {
                    b.Property<int>("SaleLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleLineID"));

                    b.Property<int?>("BatchID")
                        .HasColumnType("int");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SaleID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleLineID");

                    b.HasIndex("BatchID");

                    b.HasIndex("GoodID");

                    b.HasIndex("SaleID");

                    b.ToTable("SaleLines");
                });

            modelBuilder.Entity("InventoryManagement.Models.Stock", b =>
                {
                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<int>("BatchID")
                        .HasColumnType("int");

                    b.Property<int?>("BatchID1")
                        .HasColumnType("int");

                    b.Property<decimal>("InTransit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("OnHand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Reserved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("LocationID", "GoodID", "BatchID");

                    b.HasIndex("BatchID");

                    b.HasIndex("BatchID1");

                    b.HasIndex("GoodID");

                    b.ToTable("Stocks", t =>
                        {
                            t.HasCheckConstraint("CK_Stocks_NonNegative", "[OnHand] >= 0 AND [Reserved] >= 0 AND [InTransit] >= 0");
                        });
                });

            modelBuilder.Entity("InventoryManagement.Models.StockMovement", b =>
                {
                    b.Property<long>("MovementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MovementID"));

                    b.Property<int?>("BatchID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("FromLocationID")
                        .HasColumnType("int");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RefID")
                        .HasColumnType("int");

                    b.Property<string>("RefTable")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("ToLocationID")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MovementID");

                    b.HasIndex("BatchID");

                    b.HasIndex("ToLocationID");

                    b.HasIndex("FromLocationID", "ToLocationID");

                    b.HasIndex("GoodID", "CreatedAt");

                    b.ToTable("StockMovements", t =>
                        {
                            t.HasCheckConstraint("CK_StockMovements_Type", "[MovementType] IN ('RECEIPT','SALE','RETURN','TRANSFER_SHIP','TRANSFER_RECEIVE','ADJUST_POS','ADJUST_NEG')");
                        });
                });

            modelBuilder.Entity("InventoryManagement.Models.Store", b =>
                {
                    b.Property<int>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreID"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StoreID");

                    b.HasIndex("LocationID")
                        .IsUnique();

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("InventoryManagement.Models.StorePrice", b =>
                {
                    b.Property<int>("StoreID")
                        .HasColumnType("int");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("date");

                    b.Property<decimal>("PriceSell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StoreID", "GoodID", "EffectiveFrom");

                    b.HasIndex("GoodID");

                    b.ToTable("StorePrices");
                });

            modelBuilder.Entity("InventoryManagement.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("InventoryManagement.Models.Transfer", b =>
                {
                    b.Property<int>("TransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FromLocationID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ToLocationID")
                        .HasColumnType("int");

                    b.HasKey("TransferID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FromLocationID");

                    b.HasIndex("ToLocationID");

                    b.ToTable("Transfers", t =>
                        {
                            t.HasCheckConstraint("CK_Transfers_Status", "[Status] IN ('Draft','Approved','Shipped','Received','Cancelled')");
                        });
                });

            modelBuilder.Entity("InventoryManagement.Models.TransferItem", b =>
                {
                    b.Property<int>("TransferItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferItemID"));

                    b.Property<int?>("BatchID")
                        .HasColumnType("int");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReceivedQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShippedQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransferID")
                        .HasColumnType("int");

                    b.HasKey("TransferItemID");

                    b.HasIndex("BatchID");

                    b.HasIndex("GoodID");

                    b.HasIndex("TransferID");

                    b.ToTable("TransferItems");
                });

            modelBuilder.Entity("InventoryManagement.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InventoryManagement.Models.Views.StockAvailableView", b =>
                {
                    b.Property<decimal>("Available")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BatchID")
                        .HasColumnType("int");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<decimal>("InTransit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<decimal>("OnHand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Reserved")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable((string)null);

                    b.ToView("v_StockAvailable", (string)null);
                });

            modelBuilder.Entity("InventoryManagement.Models.Views.StockByGoodView", b =>
                {
                    b.Property<decimal>("Available")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GoodID")
                        .HasColumnType("int");

                    b.Property<decimal>("InTransit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<decimal>("OnHand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Reserved")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable((string)null);

                    b.ToView("v_StockByGood", (string)null);
                });

            modelBuilder.Entity("InventoryManagement.Models.Adjustment", b =>
                {
                    b.HasOne("InventoryManagement.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserUserID");

                    b.HasOne("InventoryManagement.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("InventoryManagement.Models.AdjustmentLine", b =>
                {
                    b.HasOne("InventoryManagement.Models.Adjustment", "Adjustment")
                        .WithMany("Lines")
                        .HasForeignKey("AdjustmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchID");

                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adjustment");

                    b.Navigation("Batch");

                    b.Navigation("Good");
                });

            modelBuilder.Entity("InventoryManagement.Models.Batch", b =>
                {
                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany("Batches")
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");
                });

            modelBuilder.Entity("InventoryManagement.Models.Good", b =>
                {
                    b.HasOne("InventoryManagement.Models.Category", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("InventoryManagement.Models.Location", b =>
                {
                    b.HasOne("InventoryManagement.Models.Location", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentLocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("InventoryManagement.Models.PriceChange", b =>
                {
                    b.HasOne("InventoryManagement.Models.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedByUserUserID");

                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("Good");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchaseOrder", b =>
                {
                    b.HasOne("InventoryManagement.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchaseOrderLine", b =>
                {
                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.PurchaseOrder", "PO")
                        .WithMany("Lines")
                        .HasForeignKey("POID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("PO");
                });

            modelBuilder.Entity("InventoryManagement.Models.Receipt", b =>
                {
                    b.HasOne("InventoryManagement.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.PurchaseOrder", "PO")
                        .WithMany()
                        .HasForeignKey("POID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InventoryManagement.Models.User", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Location");

                    b.Navigation("PO");

                    b.Navigation("ReceivedByUser");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("InventoryManagement.Models.ReceiptDetail", b =>
                {
                    b.HasOne("InventoryManagement.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Receipt", "Receipt")
                        .WithMany("Details")
                        .HasForeignKey("ReceiptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Good");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("InventoryManagement.Models.Reservation", b =>
                {
                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("InventoryManagement.Models.Sale", b =>
                {
                    b.HasOne("InventoryManagement.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InventoryManagement.Models.Location", "StoreLocation")
                        .WithMany()
                        .HasForeignKey("StoreLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("StoreLocation");
                });

            modelBuilder.Entity("InventoryManagement.Models.SaleLine", b =>
                {
                    b.HasOne("InventoryManagement.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Sale", "Sale")
                        .WithMany("Lines")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Good");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("InventoryManagement.Models.Stock", b =>
                {
                    b.HasOne("InventoryManagement.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Batch", null)
                        .WithMany("Stocks")
                        .HasForeignKey("BatchID1");

                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany("Stocks")
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Location", "Location")
                        .WithMany("Stocks")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Good");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("InventoryManagement.Models.StockMovement", b =>
                {
                    b.HasOne("InventoryManagement.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Models.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany("StockMovements")
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Batch");

                    b.Navigation("FromLocation");

                    b.Navigation("Good");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("InventoryManagement.Models.Store", b =>
                {
                    b.HasOne("InventoryManagement.Models.Location", "Location")
                        .WithOne()
                        .HasForeignKey("InventoryManagement.Models.Store", "LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("InventoryManagement.Models.StorePrice", b =>
                {
                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Store", "Store")
                        .WithMany("StorePrices")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("InventoryManagement.Models.Transfer", b =>
                {
                    b.HasOne("InventoryManagement.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("InventoryManagement.Models.TransferItem", b =>
                {
                    b.HasOne("InventoryManagement.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Models.Good", "Good")
                        .WithMany()
                        .HasForeignKey("GoodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Transfer", "Transfer")
                        .WithMany("Items")
                        .HasForeignKey("TransferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Good");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("InventoryManagement.Models.User", b =>
                {
                    b.HasOne("InventoryManagement.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("InventoryManagement.Models.Adjustment", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("InventoryManagement.Models.Batch", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("InventoryManagement.Models.Category", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("InventoryManagement.Models.Good", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("StockMovements");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("InventoryManagement.Models.Location", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchaseOrder", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("InventoryManagement.Models.Receipt", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("InventoryManagement.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("InventoryManagement.Models.Sale", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("InventoryManagement.Models.Store", b =>
                {
                    b.Navigation("StorePrices");
                });

            modelBuilder.Entity("InventoryManagement.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("InventoryManagement.Models.Transfer", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
